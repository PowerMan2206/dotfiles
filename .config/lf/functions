#!/bin/sh

# trash items
cmd trash %{{
	# put items into array that we can count them
	files=()
	while read -r line; do files+=("$line"); done <<< "$fx"
	
	# count how many items there are
	len=${#files[@]}
	
	# confirm trashing
	if [[ $len == 1 ]]; then
		echo -n "trash '$fx' ?"
	else
		echo -n "trash $len items?"
	fi
	echo -n " [y/N] "
	
	# read answer
	read -n 1 ans
	# make it lowercase
	ans="${ans,,}" 
	
	echo
	
	# nuke
	if [[ $ans == y ]]; then
		trash-put $fx
		if [[ $len == 1 ]]; then
			echo "trashed '$files'"
		else
			echo "trashed $len items"
		fi
	else
		# needed to clear the bottom row
		echo
	fi
}}

# toggle the preview
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# extract the current file with the right command
cmd extract ${{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f ;;
		*.tar.gz|*.tgz) tar xzvf $f ;;
		*.tar.xz|*.txz) tar xJvf $f ;;
		*.zip) unzip $f ;;
		*.rar) unrar x $f ;;
		*.7z) 7z x $f ;;
	esac
}}

# compress current file or selected files with tar and gzip
cmd tar ${{
	set -f
	mkdir $1
	cp -r $fx $1
	tar czf $1.tar.gz $1
	rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
	set -f
	mkdir $1
	cp -r $fx $1
	zip -r $1.zip $1
	rm -rf $1
}}

